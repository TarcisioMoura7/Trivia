{"version":3,"sources":["pages/Login.js","redux/action/index.js","components/Header.js","components/Loading.js","components/Questions.js","components/CardQuestions.js","pages/Game.js","pages/Configs.js","components/Results.js","pages/Feedback.js","pages/Ranking.js","serviceWorker.js","redux/reducer/gravatar.js","redux/reducer/token.js","redux/reducer/index.js","redux/store/index.js","index.js","App.js","trivia.png"],"names":["Login","state","disableBtn","nameInput","email","redirect","toConfig","minLengthName","validateEmail","bind","handleChange","fetchGravatar","requestAPI","redirectToConfig","setInput","TextField","id","label","variant","name","onChange","target","inputProps","type","helperText","fetch","result","json","localStorage","setItem","JSON","stringify","token","this","setState","emailValue","test","value","setPlayerInfo","props","toHash","md5","toString","url","to","className","src","logo","alt","Button","data-testid","disabled","length","onClick","color","Component","connect","dispatch","actionGetGravatarImg","Header","getUrl","getName","score","style","width","borderRadius","React","defaultProps","gravatar","Loading","Questions","incorrect","correct","questions","questionNumber","getScore","incorrect_answers","map","answer","index","key","difficulty","correct_answer","CardQuestions","gif","seconds","Card","category","question","Game","loading","assertions","next","getQuestions","timer","buttonColorDisabler","nextQuestion","enableButton","setToLocal","count","setInterval","player","gravatarEmail","myValue","parse","getItem","defineObj","picture","ranking","then","r","results","notas","clearInterval","clearTimeout","correctAnswerButton","document","getElementsByClassName","border","setAttribute","querySelectorAll","forEach","button","removeAttribute","Box","bgcolor","clone","size","Configs","Results","Feedback","pullScore","finalScore","message","redirectLogin","redirectRanking","setMessage","Ranking","shouldRedirect","sortRanking","sort","a","b","e","Boolean","window","location","hostname","match","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","exact","path","component","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.7401d356.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport md5 from 'crypto-js/md5';\nimport TextField from '@material-ui/core/TextField';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport logo from '../trivia.png';\nimport { actionGetGravatarImg } from '../redux/action';\nimport './Login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      disableBtn: true,\n      nameInput: '',\n      email: '',\n      redirect: false,\n      toConfig: false,\n      minLengthName: 3,\n    };\n    this.validateEmail = this.validateEmail.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.fetchGravatar = this.fetchGravatar.bind(this);\n    this.requestAPI = this.requestAPI.bind(this);\n    this.redirectToConfig = this.redirectToConfig.bind(this);\n    this.setInput = this.setInput.bind(this);\n  }\n\n  setInput() {\n    return (\n      <>\n        <TextField\n          id=\"name-helperText\"\n          label=\"Nome\"\n          variant=\"outlined\"\n          name=\"nameInput\"\n          onChange={ ({ target }) => this.handleChange(target) }\n          inputProps={ { 'data-testid': 'input-player-name' } }\n        />\n        <TextField\n          id=\"email-helperText\"\n          label=\"Email\"\n          type=\"email\"\n          helperText=\"Digite seu email do gravatar\"\n          variant=\"outlined\"\n          name=\"email\"\n          onChange={ ({ target }) => this.handleChange(target) }\n          inputProps={ { 'data-testid': 'input-gravatar-email' } }\n        />\n      </>\n    );\n  }\n\n  async requestAPI() {\n    const endPoint = 'https://opentdb.com/api_token.php?command=request';\n    let result = await fetch(endPoint);\n    result = await result.json();\n    localStorage.setItem('token', JSON.stringify(result.token));\n    this.setState({\n      redirect: true,\n    });\n  }\n\n  redirectToConfig() {\n    this.setState({\n      toConfig: true,\n    });\n  }\n\n  validateEmail(emailValue) {\n    const reg = /^[a-z0-9_.-]+@[a-z]+\\.[a-z]{2,3}(?:\\.[a-z]{2})?$/;\n    this.setState({\n      disableBtn: (!reg.test(emailValue)),\n    });\n  }\n\n  handleChange(target) {\n    const { value, name } = target;\n    this.setState({\n      [name]: value,\n    });\n    if (target.name === 'email') {\n      this.validateEmail(target.value);\n    }\n  }\n\n  async fetchGravatar() {\n    const { email, nameInput } = this.state;\n    const { setPlayerInfo } = this.props;\n    const toHash = md5(email).toString();\n    const result = await fetch(`https://www.gravatar.com/avatar/${toHash}`);\n    setPlayerInfo(result.url, nameInput);\n    this.requestAPI();\n  }\n\n  render() {\n    const { disableBtn, nameInput, redirect, toConfig, minLengthName } = this.state;\n    if (redirect) {\n      return <Redirect to=\"/jogo\" />;\n    } if (toConfig) {\n      return <Redirect to=\"/configs\" />;\n    }\n    return (\n      <section className=\"login-content\">\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n        {this.setInput()}\n        <Button\n          type=\"button\"\n          data-testid=\"btn-play\"\n          disabled={ disableBtn || nameInput.length < minLengthName }\n          onClick={ () => this.fetchGravatar() }\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          <PlayCircleFilledIcon />\n          Jogar\n        </Button>\n        <Button\n          type=\"button\"\n          data-testid=\"btn-settings\"\n          onClick={ () => this.redirectToConfig() }\n          variant=\"contained\"\n          color=\"secondary\"\n        >\n          <SettingsIcon />\n          Configurações\n        </Button>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setPlayerInfo: (url, name) => dispatch(actionGetGravatarImg(url, name)),\n});\n\nLogin.propTypes = {\n  setPlayerInfo: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","export const actionGetGravatarImg = (url, name) => ({\n  type: 'GET_IMG', url, name,\n});\n\nexport const actionGetToken = (token) => ({\n  type: 'GET-TOKEN', token,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Header extends React.Component {\n  render() {\n    const { getUrl, getName, score } = this.props;\n    return (\n      <header>\n        <img\n          style={ { width: '90px', borderRadius: '50px' } }\n          data-testid=\"header-profile-picture\"\n          src={ getUrl }\n          alt=\"Profile\"\n        />\n        <div className=\"headerGame\">\n          <h4 data-testid=\"header-player-name\">{getName}</h4>\n          <h5 data-testid=\"header-score\">{score}</h5>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  getUrl: state.gravatar.url,\n  getName: state.gravatar.name,\n});\n\nHeader.propTypes = {\n  getUrl: PropTypes.string.isRequired,\n  getName: PropTypes.string,\n  score: PropTypes.number.isRequired,\n};\n\nHeader.defaultProps = {\n  getName: '',\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\n\nclass Loading extends React.Component {\n  render() {\n    return (\n      <div className=\"loading-content\">\n        <h3>Loading...</h3>\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n    this.incorrect = this.incorrect.bind(this);\n    this.correct = this.correct.bind(this);\n  }\n\n  incorrect() {\n    const { questions, questionNumber, getScore } = this.props;\n    return (\n      questions[questionNumber]\n        .incorrect_answers.map((answer, index) => (\n          <button\n            type=\"button\"\n            key={ index }\n            id=\"incorrect\"\n            name=\"incorrect\"\n            data-testid={ `wrong-answer-${index}` }\n            onClick={ ({ target }) => getScore(target) }\n            className=\"w-answer\"\n          >\n            {answer}\n          </button>\n        ))\n    );\n  }\n\n  correct() {\n    const { questions, questionNumber, getScore } = this.props;\n    return (\n      <button\n        type=\"button\"\n        id={ questions[questionNumber].difficulty }\n        name=\"correct\"\n        data-testid=\"correct-answer\"\n        onClick={ ({ target }) => getScore(target) }\n        className=\"c-answer\"\n      >\n        { questions[questionNumber].correct_answer }\n      </button>\n\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"questions-content\">\n        { this.incorrect() }\n        { this.correct() }\n      </div>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  questionNumber: PropTypes.number.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.string).isRequired,\n  getScore: PropTypes.func.isRequired,\n};\nexport default Questions;\n","import React, { Component } from 'react';\nimport { Card } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport TimerOffSharpIcon from '@material-ui/icons/TimerOffSharp';\n\nclass CardQuestions extends Component {\n  constructor(props) {\n    super(props);\n    this.gif = this.gif.bind(this);\n  }\n\n  gif() {\n    const { seconds } = this.props;\n    if (seconds === 0) {\n      return (\n        <div>\n          <TimerOffSharpIcon />\n        </div>\n      );\n    }\n  }\n\n  render() {\n    const { questions, questionNumber, seconds } = this.props;\n    return (\n      <Card>\n        <div className=\"secondsEndCategory\">\n          <span className=\"seconds\">{seconds}</span>\n          <h1 data-testid=\"question-category\">\n            { questions[questionNumber].category }\n          </h1>\n          <span className=\"gif\">{this.gif()}</span>\n        </div>\n        <p data-testid=\"question-text\" className=\"asking\">\n          { questions[questionNumber].question }\n        </p>\n      </Card>\n    );\n  }\n}\n\nCardQuestions.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n  })).isRequired,\n  questionNumber: PropTypes.number.isRequired,\n  seconds: PropTypes.number.isRequired,\n};\nexport default CardQuestions;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { Box, Button } from '@material-ui/core';\nimport Header from '../components/Header';\nimport Loading from '../components/Loading';\nimport Questions from '../components/Questions';\nimport './Game.css';\nimport CardQuestions from '../components/CardQuestions';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionNumber: 0,\n      questions: [],\n      loading: true,\n      score: 0,\n      assertions: 0,\n      next: false,\n      seconds: 30,\n    };\n    this.getQuestions = this.getQuestions.bind(this);\n    this.getScore = this.getScore.bind(this);\n    this.timer = this.timer.bind(this);\n    this.buttonColorDisabler = this.buttonColorDisabler.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.enableButton = this.enableButton.bind(this);\n    this.setToLocal = this.setToLocal.bind(this);\n  }\n\n  componentDidMount() {\n    const interval = 1000;\n    this.getQuestions();\n    this.count = setInterval(this.timer, interval);\n  }\n\n  componentDidUpdate() {\n    const { assertions, score } = this.state;\n    const { getUrl, getName } = this.props;\n    const value = {\n      player: {\n        name: getName,\n        assertions,\n        score,\n        gravatarEmail: getUrl,\n      },\n    };\n    const myValue = JSON.stringify(value);\n    localStorage.setItem('state', myValue);\n  }\n\n  setToLocal() {\n    const player = JSON.parse(localStorage.getItem('state'));\n    const defineObj = {\n      name: player.player.name,\n      score: player.player.score,\n      picture: player.player.gravatarEmail,\n    };\n    if (localStorage.getItem('ranking')) {\n      const ranking = JSON.parse(localStorage.getItem('ranking'));\n      localStorage.setItem('ranking', JSON.stringify([...ranking, defineObj]));\n    } else {\n      localStorage.setItem('ranking', JSON.stringify([defineObj]));\n    }\n    return (\n      <Redirect to=\"/feedback\" />\n    );\n  }\n\n  getQuestions() {\n    const token = JSON.parse(localStorage.getItem('token'));\n    fetch(`https://opentdb.com/api.php?amount=5&token=${token}`)\n      .then((r) => r.json())\n      .then((json) => this.setState({\n        questions: [...json.results],\n        loading: false,\n      }));\n  }\n\n  getScore(target) {\n    const { id, name } = target;\n    const { assertions, score, seconds } = this.state;\n    const right = 10;\n    const notas = {\n      hard: 3,\n      medium: 2,\n      easy: 1,\n    };\n    switch (name) {\n    case 'correct': switch (id) {\n    case 'hard': this.setState({\n      score: right + ((seconds - 1) * notas.hard) + score,\n      assertions: (assertions + 1),\n    });\n      break;\n    case 'medium': this.setState({\n      score: right + ((seconds - 1) * notas.medium) + score,\n      assertions: (assertions + 1),\n    });\n      break;\n    case 'easy': this.setState({\n      score: right + ((seconds - 1) * notas.easy) + score,\n      assertions: (assertions + 1),\n    });\n      break;\n    default:\n    }\n      break;\n    default:\n    }\n    this.buttonColorDisabler();\n    this.timer(name);\n  }\n\n  timer(target) {\n    const { seconds } = this.state;\n    if (seconds === 0) {\n      this.buttonColorDisabler();\n      clearInterval(this.count);\n    }\n    if (seconds > 0) this.setState({ seconds: seconds - 1 });\n    if (seconds === 0) {\n      this.buttonColorDisabler();\n      clearInterval(this.count);\n    }\n    switch (target) {\n    case 'correct': clearTimeout(this.count);\n      break;\n    case 'incorrect': clearTimeout(this.count);\n      break;\n    default:\n    }\n  }\n\n  buttonColorDisabler() {\n    const correctAnswerButton = document.getElementsByClassName('c-answer');\n    correctAnswerButton[0].style.border = '3px solid rgb(6, 240, 15)';\n    correctAnswerButton[0].setAttribute('disabled', 'disabled');\n    const incorrectAnswerButton = document.querySelectorAll('.w-answer');\n    incorrectAnswerButton.forEach((button) => {\n      button.style.border = '3px solid rgb(255, 0, 0)';\n      button.setAttribute('disabled', 'disabled');\n    });\n    this.setState({\n      next: true,\n    });\n  }\n\n  enableButton() {\n    const correctAnswerButton = document.getElementsByClassName('c-answer');\n    correctAnswerButton[0].style.border = '1px solid black';\n    correctAnswerButton[0].removeAttribute('disabled', 'disabled');\n    const incorrectAnswerButton = document.querySelectorAll('.w-answer');\n    incorrectAnswerButton.forEach((button) => {\n      button.style.border = '1px solid black';\n      button.removeAttribute('disabled', 'disabled');\n    });\n  }\n\n  nextQuestion() {\n    const interval = 1000;\n    const resetTimer = 30;\n    const { questionNumber } = this.state;\n    this.setState({\n      questionNumber: (questionNumber + 1),\n      seconds: resetTimer,\n      next: false,\n    });\n    this.count = setInterval(this.timer, interval);\n    this.enableButton();\n  }\n\n  render() {\n    const { questions, questionNumber, loading, score, seconds, next } = this.state;\n    const { getUrl, getName } = this.props;\n    const max = 4;\n    if (questionNumber > max) {\n      return (\n        <>\n          { this.setToLocal() }\n        </>\n      );\n    }\n    if (!loading) {\n      return (\n        <main className=\"geral\">\n          <Header getUrl={ getUrl } getName={ getName } score={ score } />\n          <div className=\"cardEndQuestions\">\n            <CardQuestions\n              questions={ questions }\n              questionNumber={ questionNumber }\n              seconds={ seconds }\n            />\n            <Questions\n              questions={ questions }\n              questionNumber={ questionNumber }\n              getScore={ this.getScore }\n            />\n            {\n              next\n                ? (\n                  <Box bgcolor=\"#00BFFF\" clone>\n                    <Button\n                      size=\"medium\"\n                      variant=\"contained\"\n                      type=\"button\"\n                      data-testid=\"btn-next\"\n                      onClick={ this.nextQuestion }\n                    >\n                      Próxima\n                    </Button>\n                  </Box>)\n                : null\n            }\n          </div>\n        </main>\n      );\n    }\n    return (<Loading />);\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  getUrl: state.gravatar.url,\n  getName: state.gravatar.name,\n});\nGame.propTypes = {\n  getUrl: PropTypes.string.isRequired,\n  getName: PropTypes.string.isRequired,\n};\nexport default connect(mapStateToProps, null)(Game);\n","import React, { Component } from 'react';\n\nclass Configs extends Component {\n  render() {\n    return (\n      <h1\n        data-testid=\"settings-title\"\n      >\n        Configurações\n      </h1>\n    );\n  }\n}\n\nexport default Configs;\n","import React from 'react';\n\nclass Results extends React.Component {\n  render() {\n    const results = JSON.parse(localStorage.getItem('state'));\n    const { player } = results;\n    return (\n      <div>\n        <p>\n          { 'Você acertou ' }\n          <span data-testid=\"feedback-total-question\">\n            { player.assertions }\n          </span>\n          { ' perguntas' }\n        </p>\n        <p>\n          { 'Sua pontuação foi de ' }\n          <span data-testid=\"feedback-total-score\">\n            { player.score }\n          </span>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Results;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport Header from '../components/Header';\nimport Results from '../components/Results';\nimport './Feedback.css';\n\nclass Feedback extends React.Component {\n  constructor() {\n    super();\n\n    const pullScore = localStorage.getItem('state');\n    const finalScore = JSON.parse(pullScore).player.score;\n    const { assertions } = JSON.parse(pullScore).player;\n    this.state = {\n      score: finalScore,\n      assertions,\n      message: '',\n      redirectLogin: false,\n      redirectRanking: false,\n    };\n    this.setMessage = this.setMessage.bind(this);\n    this.redirectLogin = this.redirectLogin.bind(this);\n    this.redirectRanking = this.redirectRanking.bind(this);\n  }\n\n  componentDidMount() {\n    this.setMessage();\n  }\n\n  setMessage() {\n    const { assertions } = this.state;\n    const minAssertions = 3;\n    if (assertions < minAssertions) {\n      this.setState({\n        message: 'Podia ser melhor...',\n      });\n    } else {\n      this.setState({\n        message: 'Mandou bem!',\n      });\n    }\n  }\n\n  redirectLogin() {\n    this.setState({ redirectLogin: true });\n  }\n\n  redirectRanking() {\n    this.setState({ redirectRanking: true });\n  }\n\n  render() {\n    const { score, message, redirectLogin, redirectRanking } = this.state;\n    if (redirectRanking) {\n      return <Redirect to=\"/ranking\" />;\n    }\n    if (redirectLogin) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <section className=\"feedback-content\">\n        <Results />\n        <Header score={ score } />\n        <p data-testid=\"feedback-text\">{message || 'Loading'}</p>\n        <div className=\"button-play-again\">\n          <Button\n            type=\"button\"\n            data-testid=\"btn-play-again\"\n            onClick={ this.redirectLogin }\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            <ReplayIcon />\n            Jogar Novamente\n          </Button>\n        </div>\n        <div className=\"button-ranking\">\n          <Button\n            type=\"button\"\n            data-testid=\"btn-ranking\"\n            onClick={ this.redirectRanking }\n            variant=\"contained\"\n            color=\"secondary\"\n          >\n            <FormatListNumberedIcon />\n            Ver Ranking\n          </Button>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Feedback;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport './Ranking.css';\n\nclass Ranking extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      redirect: false,\n    };\n    this.shouldRedirect = this.shouldRedirect.bind(this);\n  }\n\n  shouldRedirect() {\n    this.setState({\n      redirect: true,\n    });\n  }\n\n  render() {\n    const getRanking = JSON.parse(localStorage.getItem('ranking'));\n    const sortRanking = getRanking.sort((a, b) => b.score - a.score);\n    const { redirect } = this.state;\n    if (redirect) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <section className=\"section-ranking\">\n        <h2 className=\"title\" data-testid=\"ranking-title\">Ranking</h2>\n        <ul className=\"ranking-list\">\n          <li className=\"li-header\">\n            <p>Foto de Perfil</p>\n            <p>Nome</p>\n            <p>Score</p>\n          </li>\n          {sortRanking.map((e, index) => (\n            <li key={ e.picture } className=\"li-ranking\">\n              <img src={ e.picture } alt=\"player pic\" id=\"user-pic\" />\n              {' '}\n              <p id=\"\" data-testid={ `player-name-${index}` }>{e.name}</p>\n              {' '}\n              <p className=\"score\" data-testid={ `player-score-${index}` }>{e.score}</p>\n            </li>\n          ))}\n        </ul>\n        <Button\n          type=\"button\"\n          className=\"go-back-btn\"\n          data-testid=\"btn-go-home\"\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={ () => this.shouldRedirect() }\n        >\n          <ArrowBackIcon />\n          Início\n        </Button>\n      </section>\n    );\n  }\n}\n\nexport default Ranking;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INITIAL_STATE = {\n  url: 'https://www.seekpng.com/png/full/245-2454602_tanni-chand-default-user-image-png.png',\n};\n\nconst gravatar = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'GET_IMG':\n    return { url: action.url, name: action.name };\n  default:\n    return state;\n  }\n};\n\nexport default gravatar;\n","const INITIAL_STATE = {\n  result: '',\n};\n\nconst token = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'GET_TOKEN':\n    return { result: action.token };\n  default:\n    return state;\n  }\n};\n\nexport default token;\n","import { combineReducers } from 'redux';\nimport gravatar from './gravatar';\nimport token from './token';\n\nconst rootReducer = combineReducers({ gravatar, token });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducer';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Configs from './pages/Configs';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Switch>\n          <Route exact path=\"/\" component={ Login } />\n          <Route exact path=\"/configs\" component={ Configs } />\n          <Route exact path=\"/jogo\" component={ Game } />\n          <Route exact path=\"/feedback\" component={ Feedback } />\n          <Route exact path=\"/ranking\" component={ Ranking } />\n        </Switch>\n      </header>\n    </div>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";"],"sourceRoot":""}